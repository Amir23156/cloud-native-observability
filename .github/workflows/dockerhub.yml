name: Docker Hub Push

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
      - "*.*.*"

env:
  IMAGE_NAME: go-orders-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # Push a tag matching the full commit SHA so deploy can reference it exactly
            type=sha,format=long
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-eks:
    name: Deploy image to EKS (main)
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive AWS/cluster params from EKS ARN
        id: parse
        shell: bash
        env:
          EKS_CLUSTER_ARN_SECRET: ${{ secrets.EKS_CLUSTER_ARN }}
          EKS_CLUSTER_ARN_VAR: ${{ vars.EKS_CLUSTER_ARN }}
          AWS_ROLE_NAME: ${{ vars.AWS_ROLE_NAME }}
        run: |
          ARN="$EKS_CLUSTER_ARN_SECRET"
          if [ -z "$ARN" ]; then ARN="$EKS_CLUSTER_ARN_VAR"; fi
          if [ -z "$ARN" ]; then
            echo "EKS_CLUSTER_ARN must be set (prefer Secrets; Variables accepted as fallback)" >&2
            exit 1
          fi
          REGION=$(echo "$ARN" | cut -d: -f4)
          ACCOUNT=$(echo "$ARN" | cut -d: -f5)
          NAME=$(echo "$ARN" | awk -F'/' '{print $NF}')
          ROLE_NAME=${AWS_ROLE_NAME:-GitHubActionsEKSDeployer}
          ROLE_ARN="arn:aws:iam:${ACCOUNT}:role/${ROLE_NAME}"
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.parse.outputs.role_arn }}
          aws-region: ${{ steps.parse.outputs.region }}

      - name: Update kubeconfig
        shell: bash
        run: |
          echo "Configuring kubeconfig for cluster '${{ steps.parse.outputs.name }}' in region '${{ steps.parse.outputs.region }}'"
          aws eks update-kubeconfig \
            --name "${{ steps.parse.outputs.name }}" \
            --region "${{ steps.parse.outputs.region }}"

      - name: Set image to current commit SHA and rollout
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          IMAGE=docker.io/${DOCKERHUB_USERNAME}/go-orders-api:sha-${GITHUB_SHA}
          echo "Deploying $IMAGE to deployment/go-orders-api"
          kubectl -n observability set image deployment/go-orders-api server=$IMAGE
          kubectl -n observability rollout status deployment/go-orders-api --timeout=180s
